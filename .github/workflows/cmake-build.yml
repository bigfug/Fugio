
name: Fugio/Nightly

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]
    
jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <macOS, Release, latest clang compiler toolchain on the default runner image, default generator - NOT SIGNED (YET)>

      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, cl, clang]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            qt_host: windows
            qt_arch: win64_msvc2019_64
            cpack_generators: -DCPACK_BINARY_NSIS=TRUE -DCPACK_BINARY_ZIP=TRUE
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            qt_host: linux
            qt_arch: gcc_64
            cpack_generators: -DCPACK_BINARY_TGZ=TRUE -DCPACK_BINARY_TZ=FALSE -DCPACK_BINARY_STGZ=FALSE
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            qt_host: mac
            qt_arch: clang_64
            cpack_generators: -DCPACK_BINARY_DRAGNDROP=TRUE -DCPACK_BINARY_ZIP=TRUE -DCPACK_BINARY_TGZ=FALSE -DCPACK_BINARY_STGZ=FALSE
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==3.1.*'
        version: '6.6.2'
        modules: 'qtcore5compat'
        host: ${{ matrix.qt_host }}
        target: 'desktop'
        arch: ${{ matrix.qt_arch }}
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCPACK_PACKAGE_DIRECTORY=${{ github.workspace }}/package
        -DFUGIO_API=${{ github.workspace }}/Fugio/include
        -DFUGIO_BUILD_DIST=TRUE
        ${{ matrix.cpack_generators }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Package
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: cmake --build . --config ${{ matrix.build_type }} --target package

    - name: Archive outputs
      uses: actions/upload-artifact@v3
      with:
        name: fugio-nightly
        path: |
          ${{ github.workspace }}/package
          !${{ github.workspace }}/package/_CPack_Packages
